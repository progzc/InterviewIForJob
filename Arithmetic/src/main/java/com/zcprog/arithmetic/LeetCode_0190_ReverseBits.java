package com.zcprog.arithmetic;

import java.util.Arrays;

/**
 * @Description 颠倒二进制位
 * @Author zhaochao
 * @Date 2020/12/15 18:26
 * @Email zcprog@foxmail.com
 * @Version V1.0
 */
public class LeetCode_0190_ReverseBits {
    /**
     * LeetCode地址：https://leetcode-cn.com/problems/reverse-bits/
     * 颠倒给定的 32 位无符号整数的二进制位。
     * <p>
     * 示例 1：
     * 输入: 00000010100101000001111010011100
     * 输出: 00111001011110000010100101000000
     * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
     * <p>
     * 示例 2：
     * 输入：11111111111111111111111111111101
     * 输出：10111111111111111111111111111111
     * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293 (Integer.MAX_VALUE=2147483647)
     * 因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
     * <p>
     * 提示：
     * 请注意，在某些语言（如 Java）中，没有无符号整数类型。
     * 在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。
     * 因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。// -3对应的二进制为：11111111111111111111111111111101
     * <p>
     * 进阶:
     * 如果多次调用这个函数，你将如何优化你的算法？
     * <p>
     * 移位运算符：
     * <<：左移，相当于乘以2（丢弃符号位，0补最低位）
     * >>：右移，相当于除以2（符号位不变，左边补上符号位）
     * >>>：无符号右移，（忽略了符号位扩展，0补最高位）
     */
    public static void main(String[] args) {
        int[] nums = {-3, 0b00000010100101000001111010011100};
        Arrays.stream(nums).forEach(num -> {
            System.out.println(reversalSolve(num));
        });
    }

    /**
     * 逐位颠倒
     * 时间复杂度：O(1)
     * 空间复杂度：O(1)
     */
    private static int reversalSolve(int n) {
        int ret = 0;
        for (int i = 0; i <= 31; i++) {
            ret += (n & 1) << (31 - i);
            n = n >> 1;
        }
        return ret;
    }
}
