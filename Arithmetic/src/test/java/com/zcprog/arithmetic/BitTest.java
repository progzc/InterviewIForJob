package com.zcprog.arithmetic;

import org.junit.Test;

/**
 * @Description 位移动测试
 * @Author zhaochao
 * @Date 2020/12/15 18:56
 * @Email zcprog@foxmail.com
 * @Version V1.0
 */
public class BitTest {
    /**
     * -10的二进制:11111111111111111111111111110110
     * +10的二进制:00000000000000000000000000001010
     * <p>
     * 负数的二进制计算的方法（以-10为例）：
     * （1）对应正数的二进制码：00000000000000000000000000001010
     * （2）取反：11111111111111111111111111110101
     * （3）加一：11111111111111111111111111110110
     */
    @Test
    public void test() {
        //Integer.toBinaryString()是将数字用二进制格式显示
        // -10的二进制:11111111111111111111111111110110
        int i = -10;
        int k = 10;
        System.out.println(Integer.toBinaryString(i));  // -10的二进制:11111111111111111111111111110110
        System.out.println(Integer.toBinaryString(k)); // 10的二进制位:00000000000000000000000000001010
        //左移两位
        int j = -10 << 2;
        System.out.println(Integer.toBinaryString(j));
        //右移两位
        int m = -10 >> 2;
        System.out.println(Integer.toBinaryString(m));
        //无符号右移
        int n = -10 >>> 2;
        System.out.println(Integer.toBinaryString(n));
    }

    /**
     * <<：左移，相当于乘以2（丢弃符号位，低位补0）
     * 正数的左移慎用：会导致很大的正数变为负数
     */
    @Test
    public void test2() {
        // ---------------------负数的左移-----------------------------
        // 0. -10的二进制位：11111111111111111111111111110110
        int i = -10;
        // 1. 左移，丢弃符号位，0补最低位：11111111111111111111111111011000
        // 2. 减一：11111111111111111111111111010111
        // 3. 取反：00000000000000000000000000101000
        // 4. 计算对应的正数：40
        // 5. 左移后的数位-40
        int k = -10 << 2;
        System.out.println("-10<<2:" + k); // -40
        int m = 0b11111111111111111111111111011000;
        System.out.println("-10<<2:" + m); // -40

        // ---------------------正数的左移-----------------------------
        int a = 0b01111111111111111111111111111111;
        System.out.println("a:" + a); // 2147483647
        int b = a << 2;
        System.out.println("a<<2:" + b); // -4
    }

    /**
     * >>：右移，相当于除以2（高位补符号位）
     * 负数的右移慎用：会导致右移与除以2的结果不一致
     */
    @Test
    public void test3() {
        // ---------------------负数的右移-----------------------------
        // 0. -10的二进制位：11111111111111111111111111110110
        int i = -10;
        // 1. 右移，符号位不变，左边补上符号位：11111111111111111111111111111101
        // 2. 减一：11111111111111111111111111111100
        // 3. 取反：00000000000000000000000000000011
        // 4. 计算对应的正数：3
        // 5. 左移后的数位-3
        System.out.println("-10>>2:" + (-10 >> 2)); // -3
        int m = 0b11111111111111111111111111111101;
        System.out.println("-10>>2:" + m); // -3
        System.out.println("-10/2/2:" + (-10 / 2 / 2)); // -2

        // ---------------------正数的右移-----------------------------
        int a = 0b01111111111111111111111111111111;
        System.out.println("a:" + a); // 2147483647
        int b = a >> 2;
        System.out.println("a>>2:" + b); // 536870911
        System.out.println("a/2:" + a / 2 / 2); // 536870911
    }

    /**
     * >>>：无符号右移，（丢弃符号位，高位补0）
     * 负数的无符号右移要慎重，会变成正数
     */
    @Test
    public void test4() {
        // ---------------------负数的无符号右移-----------------------------
        // 0. -10的二进制位：11111111111111111111111111110110
        int i = -10;
        // 1. 无符号右移，丢弃符号位，高位补0：00111111111111111111111111111101
        System.out.println("-10>>>2:" + (-10 >>> 2)); // 1073741821
        int m = 0b00111111111111111111111111111101;
        System.out.println("-10>>>2:" + m); // 1073741821

        // ---------------------正数的无符号右移-----------------------------
        int a = 0b01111111111111111111111111111111;
        System.out.println("a:" + a); // 2147483647
        int b = a >>> 2;
        System.out.println("a>>>2:" + b); // 536870911
        System.out.println("a/2:" + a / 2 / 2); // 536870911
    }


}
